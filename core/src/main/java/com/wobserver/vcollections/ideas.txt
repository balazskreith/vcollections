// Change storage to restfuls, so IREST will bethe interface, and REST clients will be the com.wobserver.vcollections.storages

Using definable collectors and providable list for cases where the temporary lists during the operations are very large!

Figure out the logging

introduce transactions for batched create, update, and delete operations so clusters are more safe with those.

Integrity checker for different virtual com.wobserver.vcollections.storages

Builders:
  Currently the builders are using a Map<String, Object> to extract configuration.
  Thats a convinient format, as json and yaml can be converted into map by an objectmapper.
  Inside the builders the objectmapper can be used to convert the configuration into a POJO,
  and javax can be used to validate the pojo. With that we can provide a safe way to build storages.


Synchronizer possibility for replicated storage

Projector, Groupper, Streamer, Listener, Where conditional.

Subscriber, and Publisher are the subscriber model for the IStorage

interface Collector<K, V> extends IStorage<K, List<V>>
 - performs a select operation on a base storage (at creation),
 -

interface Join<K1, V1, K2, V2> extends Subscriber<K1, V1>, Subscriber<K2, V2>
 - relational join between two data storage


interface Bridge<K, V> extends IStorage<K, List<V>>
 - similar to the Projector functionality by listening from multiple sources.
 It only stores the key regarding to multiple sources, and providing back the value from the appropriate
 storage when it is retrieved. The advantage is that each of source may have different extractor, and different
 converter to convert the read value to an appropriate V type.

interface ListStorage<K, V> extends IStorage<K, List<V>>
 - it solves the problem of adding and retrieving list by the key in an efficient way from the storage

interface Groupper<K, V> implements IStorage<K, List<V>>:
 - it extends
 - It solves somehow that inserted V is in a commulative list and insert it in an efficient way